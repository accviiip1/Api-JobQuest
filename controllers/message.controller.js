import { messageStoreDB } from "../services/messageStoreDB.js";
import { testConnection } from "../services/databaseService.js";

// G·ª≠i tin nh·∫Øn
export const sendMessage = async (req, res) => {
  try {
    const { senderType, senderId, receiverType, receiverId, text } = req.body;
    
    // Debug logging
    console.log("üîç sendMessage - Request body:", req.body);
    console.log("üîç sendMessage - Extracted values:", {
      senderType,
      senderId,
      receiverType,
      receiverId,
      text
    });
    console.log("üîç sendMessage - Types:", {
      senderType: typeof senderType,
      senderId: typeof senderId,
      receiverType: typeof receiverType,
      receiverId: typeof receiverId,
      text: typeof text
    });

    // Debug: Log d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c
    console.log("üîç D·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c t·ª´ frontend:", req.body);
    console.log("üîç Ki·ªÉm tra undefined trong controller:", {
      senderType,
      senderId,
      receiverType,
      receiverId,
      text
    });

    // Validation chi ti·∫øt
    if (!senderType || !senderId || !receiverType || !receiverId || !text) {
      const missing = {
        senderType: !senderType,
        senderId: !senderId,
        receiverType: !receiverType,
        receiverId: !receiverId,
        text: !text
      };
      
      console.log("‚ùå Thi·∫øu th√¥ng tin:", missing);
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc",
        missing
      });
    }

    // Ki·ªÉm tra ID c√≥ ph·∫£i l√† s·ªë h·ª£p l·ªá kh√¥ng
    if (isNaN(senderId) || isNaN(receiverId)) {
      return res.status(400).json({
        success: false,
        message: "ID kh√¥ng h·ª£p l·ªá",
        senderId,
        receiverId
      });
    }

    // Ki·ªÉm tra lo·∫°i user h·ª£p l·ªá
    const validTypes = ["user", "company"];
    if (!validTypes.includes(senderType) || !validTypes.includes(receiverType)) {
      return res.status(400).json({
        success: false,
        message: "Lo·∫°i user kh√¥ng h·ª£p l·ªá",
        senderType,
        receiverType
      });
    }

    // ƒê·∫£m b·∫£o t·∫•t c·∫£ tham s·ªë ƒë·ªÅu c√≥ gi√° tr·ªã
    if (!senderType || !senderId || !receiverType || !receiverId || !text) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc",
        senderType,
        senderId,
        receiverType,
        receiverId,
        text
      });
    }

    const messageData = {
      senderType: senderType.toString(),
      senderId: senderId.toString(),
      receiverType: receiverType.toString(),
      receiverId: receiverId.toString(),
      text: text.toString()
    };

    // Debug logging tr∆∞·ªõc khi g·ªçi addMessage
    console.log("üîç sendMessage - messageData before addMessage:", messageData);
    console.log("üîç sendMessage - messageData validation:", {
      senderType: !!messageData.senderType,
      senderId: !!messageData.senderId,
      receiverType: !!messageData.receiverType,
      receiverId: !!messageData.receiverId,
      text: !!messageData.text
    });

    // Th√™m tin nh·∫Øn v√†o database
    const message = await messageStoreDB.addMessage(messageData);

    // Emit WebSocket event ƒë·ªÉ th√¥ng b√°o tin nh·∫Øn m·ªõi
    const io = req.app.get("io");
    if (io) {
      const roomName = `${receiverType}_${receiverId}`;
      io.to(roomName).emit("message_received", message);
      console.log(`WebSocket: Message sent to room ${roomName}`);
    }

    res.status(201).json({
      success: true,
      message: "G·ª≠i tin nh·∫Øn th√†nh c√¥ng",
      data: message
    });
  } catch (error) {
    console.error("L·ªói g·ª≠i tin nh·∫Øn:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message
    });
  }
};

// L·∫•y tin nh·∫Øn (kh√¥ng t·ª± ƒë·ªông ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc)
export const getMessages = async (req, res) => {
  try {
    const { userType, userId, otherType, otherId, markAsRead = "false" } = req.query;

    if (!userType || !userId || !otherType || !otherId) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc"
      });
    }

    // L·∫•y tin nh·∫Øn
    const messages = await messageStoreDB.getMessages(userType, userId, otherType, otherId);

    // Ch·ªâ ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc khi ƒë∆∞·ª£c y√™u c·∫ßu r√µ r√†ng
    if (markAsRead === "true") {
      await messageStoreDB.markAsRead(userType, userId, otherType, otherId);
      console.log(`‚úÖ ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc cho ${userType}_${userId} v·ªõi ${otherType}_${otherId}`);
    }

    // L·∫•y tin nh·∫Øn m·ªõi nh·∫•t ƒë·ªÉ hi·ªÉn th·ªã
    const latestMessage = messages.length > 0 ? messages[messages.length - 1] : null;

    res.json({
      success: true,
      data: messages,
      latestMessage,
      unreadCount: await messageStoreDB.getUnreadCount(userType, userId, otherType, otherId)
    });
  } catch (error) {
    console.error("L·ªói l·∫•y tin nh·∫Øn:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message
    });
  }
};

// L·∫•y conversations
export const getConversations = async (req, res) => {
  try {
    const { userType, userId } = req.query;

    if (!userType || !userId) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc"
      });
    }

    const conversations = await messageStoreDB.getConversations(userType, userId);

    res.json({
      success: true,
      data: conversations
    });
  } catch (error) {
    console.error("L·ªói l·∫•y conversations:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message
    });
  }
};

// ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc
export const markAsRead = async (req, res) => {
  try {
    const { userType, userId, otherType, otherId } = req.body;

    if (!userType || !userId || !otherType || !otherId) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc"
      });
    }

    await messageStoreDB.markAsRead(userType, userId, otherType, otherId);

    res.json({
      success: true,
      message: "ƒê√°nh d·∫•u ƒë√£ ƒë·ªçc th√†nh c√¥ng"
    });
  } catch (error) {
    console.error("L·ªói ƒë√°nh d·∫•u ƒë√£ ƒë·ªçc:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message
    });
  }
};

// L·∫•y t·ªïng s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc
export const getUnreadCount = async (req, res) => {
  try {
    const { userType, userId } = req.query;

    if (!userType || !userId) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc"
      });
    }

    const unreadCount = await messageStoreDB.getTotalUnreadCount(userType, userId);

    res.json({
      success: true,
      data: { unreadCount }
    });
  } catch (error) {
    console.error("L·ªói l·∫•y s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message
    });
  }
};

// L·∫•y s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc cho conversation c·ª• th·ªÉ
export const getConversationUnreadCount = async (req, res) => {
  try {
    const { userType, userId, otherType, otherId } = req.query;

    if (!userType || !userId || !otherType || !otherId) {
      return res.status(400).json({
        success: false,
        message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc"
      });
    }

    const unreadCount = await messageStoreDB.getUnreadCount(userType, userId, otherType, otherId);

    res.json({
      success: true,
      data: { unreadCount }
    });
  } catch (error) {
    console.error("L·ªói l·∫•y s·ªë tin nh·∫Øn ch∆∞a ƒë·ªçc cho conversation:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message
    });
  }
};

// API ƒë·ªÉ xem th·ªëng k√™ (cho testing)
export const getStats = async (req, res) => {
  try {
    const stats = await messageStoreDB.getStats();
    res.json({
      success: true,
      data: stats
    });
  } catch (error) {
    console.error("L·ªói l·∫•y th·ªëng k√™:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message
    });
  }
};

// API ƒë·ªÉ x√≥a tin nh·∫Øn (cho testing)
export const clearMessages = async (req, res) => {
  try {
    await messageStoreDB.clearMessages();
    res.json({
      success: true,
      message: "ƒê√£ x√≥a t·∫•t c·∫£ tin nh·∫Øn"
    });
  } catch (error) {
    console.error("L·ªói x√≥a tin nh·∫Øn:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message
    });
  }
};

// API ƒë·ªÉ test k·∫øt n·ªëi database
export const testDatabase = async (req, res) => {
  try {
    const isConnected = await testConnection();
    if (isConnected) {
      const stats = await messageStoreDB.getStats();
      res.json({
        success: true,
        message: "K·∫øt n·ªëi database th√†nh c√¥ng",
        data: stats
      });
    } else {
      res.status(500).json({
        success: false,
        message: "Kh√¥ng th·ªÉ k·∫øt n·ªëi database"
      });
    }
  } catch (error) {
    console.error("L·ªói test database:", error);
    res.status(500).json({
      success: false,
      message: "L·ªói server",
      error: error.message
    });
  }
};


