import nodemailer from 'nodemailer';
import dotenv from 'dotenv';

dotenv.config();

// C·∫•u h√¨nh SMTP transporter
const createTransporter = () => {
  return nodemailer.createTransport({
    service: 'gmail',
    host: 'smtp.gmail.com',
    port: 587,
    secure: false, // true for 465, false for other ports
    auth: {
      user: process.env.EMAIL_USER || 'SDU-JobQuest.system@gmail.com',
      pass: process.env.EMAIL_PASS || 'your-app-password'
    },
    tls: {
      rejectUnauthorized: false
    }
  });
};

// T·∫°o m√£ x√°c th·ª±c ng·∫´u nhi√™n
export const generateVerificationCode = () => {
  return Math.floor(100000 + Math.random() * 900000).toString(); // 6 s·ªë
};

// G·ª≠i email x√°c th·ª±c ƒëƒÉng k√Ω
export const sendVerificationEmail = async (email, verificationCode, type = 'register') => {
  try {
    console.log('üìß EMAIL VERIFICATION:');
    console.log('To:', email);
    console.log('Type:', type);
    console.log('Verification Code:', verificationCode);
    console.log('=====================================');
    
    // Th·ª≠ g·ª≠i email th·ª±c
    const transporter = createTransporter();
    
    // X√°c ƒë·ªãnh subject v√† content d·ª±a tr√™n type
    let subject, content;
    if (type === 'password_reset') {
      subject = 'M√£ x√°c th·ª±c ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u - SDU-JobQuest';
      content = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h2 style="color: #007bff; margin: 0;">SDU-JobQuest - ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h2>
          </div>
          
          <div style="background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
            <p>Xin ch√†o,</p>
            <p>B·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n SDU-JobQuest c·ªßa m√¨nh.</p>
            <p>M√£ x√°c th·ª±c c·ªßa b·∫°n l√†:</p>
            <div style="background-color: #e9ecef; padding: 15px; border-radius: 5px; text-align: center; margin: 20px 0;">
              <h1 style="color: #007bff; margin: 0; font-size: 32px; letter-spacing: 5px;">${verificationCode}</h1>
            </div>
            <p>M√£ n√†y c√≥ hi·ªáu l·ª±c trong 15 ph√∫t.</p>
            <p>N·∫øu b·∫°n kh√¥ng y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u, vui l√≤ng b·ªè qua email n√†y.</p>
          </div>
          
          <div style="margin-top: 20px; padding: 15px; background-color: #e9ecef; border-radius: 8px; font-size: 12px; color: #6c757d;">
            <p style="margin: 0;">
              Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng SDU-JobQuest. Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.
            </p>
          </div>
        </div>
      `;
    } else {
      subject = 'M√£ x√°c th·ª±c ƒëƒÉng k√Ω - SDU-JobQuest';
      content = `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
            <h2 style="color: #007bff; margin: 0;">SDU-JobQuest - X√°c th·ª±c t√†i kho·∫£n</h2>
          </div>
          
          <div style="background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
            <p>Xin ch√†o,</p>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n SDU-JobQuest!</p>
            <p>M√£ x√°c th·ª±c c·ªßa b·∫°n l√†:</p>
            <div style="background-color: #e9ecef; padding: 15px; border-radius: 5px; text-align: center; margin: 20px 0;">
              <h1 style="color: #007bff; margin: 0; font-size: 32px; letter-spacing: 5px;">${verificationCode}</h1>
            </div>
            <p>Vui l√≤ng nh·∫≠p m√£ n√†y ƒë·ªÉ ho√†n t·∫•t ƒëƒÉng k√Ω t√†i kho·∫£n.</p>
          </div>
          
          <div style="margin-top: 20px; padding: 15px; background-color: #e9ecef; border-radius: 8px; font-size: 12px; color: #6c757d;">
            <p style="margin: 0;">
              Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng SDU-JobQuest. Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.
            </p>
          </div>
        </div>
      `;
    }
    
    const mailOptions = {
      from: process.env.EMAIL_USER || 'SDU-JobQuest.system@gmail.com',
      to: email,
      subject: subject,
      html: content
    };
    
    const result = await transporter.sendMail(mailOptions);
    console.log('‚úÖ Email sent successfully:', result.messageId);
    return { success: true, messageId: result.messageId };
    
  } catch (error) {
    console.error('‚ùå Error sending verification email:', error);
    console.log('üìß FALLBACK: Showing verification code in console');
    console.log('Verification Code:', verificationCode);
    return { success: false, error: error.message };
  }
};

// G·ª≠i email reset m·∫≠t kh·∫©u
export const sendPasswordResetEmail = async (email, resetCode) => {
  try {
    // T·∫°m th·ªùi s·ª≠ d·ª•ng console.log thay v√¨ g·ª≠i email th·ª±c
    console.log('üìß PASSWORD RESET EMAIL:');
    console.log('To:', email);
    console.log('Reset Code:', resetCode);
    console.log('=====================================');
    
    // Simulate email sending delay
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    console.log('‚úÖ Password reset email sent successfully (simulated)');
    return { success: true, messageId: 'simulated-reset-' + Date.now() };
  } catch (error) {
    console.error('Error sending password reset email:', error);
    return { success: false, error: error.message };
  }
};

// G·ª≠i email h√†ng lo·∫°t
export const sendBulkEmail = async (emails, subject, content) => {
  try {
    const transporter = createTransporter();
    let sentCount = 0;
    let failedCount = 0;
    const errors = [];

    for (const email of emails) {
      try {
        const mailOptions = {
          from: process.env.EMAIL_USER || 'SDU-JobQuest.system@gmail.com',
          to: email,
          subject: subject,
          html: `
            <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
              <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px;">
                <h2 style="color: #007bff; margin: 0;">SDU-JobQuest</h2>
              </div>
              
              <div style="background-color: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
                ${content.replace(/\n/g, '<br>')}
              </div>
              
              <div style="margin-top: 20px; padding: 15px; background-color: #e9ecef; border-radius: 8px; font-size: 12px; color: #6c757d;">
                <p style="margin: 0;">
                  Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng SDU-JobQuest. Vui l√≤ng kh√¥ng tr·∫£ l·ªùi email n√†y.
                </p>
              </div>
            </div>
          `
        };

        await transporter.sendMail(mailOptions);
        sentCount++;
        console.log(`Email sent successfully to: ${email}`);
      } catch (error) {
        failedCount++;
        errors.push({ email, error: error.message });
        console.error(`Failed to send email to ${email}:`, error);
      }
    }

    return {
      success: true,
      sentCount,
      failedCount,
      errors: errors.length > 0 ? errors : undefined
    };
  } catch (error) {
    console.error('Error in sendBulkEmail:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// Test k·∫øt n·ªëi email
export const testEmailConnection = async () => {
  try {
    const transporter = createTransporter();
    await transporter.verify();
    console.log('Email connection verified successfully');
    return { success: true, message: 'Email connection OK' };
  } catch (error) {
    console.error('Email connection failed:', error);
    return { success: false, error: error.message };
  }
};








